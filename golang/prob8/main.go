package main

import (
  "fmt"
  "strconv"
  "unicode/utf8"
)

func main() {

  checkLength := 13

  largeInt := "73167176531330624919225119674426574742355349194934"
  largeInt += "96983520312774506326239578318016984801869478851843"
  largeInt += "85861560789112949495459501737958331952853208805511"
  largeInt += "12540698747158523863050715693290963295227443043557"
  largeInt += "66896648950445244523161731856403098711121722383113"
  largeInt += "62229893423380308135336276614282806444486645238749"
  largeInt += "30358907296290491560440772390713810515859307960866"
  largeInt += "70172427121883998797908792274921901699720888093776"
  largeInt += "65727333001053367881220235421809751254540594752243"
  largeInt += "52584907711670556013604839586446706324415722155397"
  largeInt += "53697817977846174064955149290862569321978468622482"
  largeInt += "83972241375657056057490261407972968652414535100474"
  largeInt += "82166370484403199890008895243450658541227588666881"
  largeInt += "16427171479924442928230863465674813919123162824586"
  largeInt += "17866458359124566529476545682848912883142607690042"
  largeInt += "24219022671055626321111109370544217506941658960408"
  largeInt += "07198403850962455444362981230987879927244284909188"
  largeInt += "84580156166097919133875499200524063689912560717606"
  largeInt += "05886116467109405077541002256983155200055935729725"
  largeInt += "71636269561882670428252483600823257530420752963450"

  fmt.Printf("%v\n", largeInt)

  totalLength := utf8.RuneCountInString(largeInt)
  i := checkLength;

  largestProduct := 0

  OUTER:
  for i <= totalLength {

    product := 1
    adjNums := largeInt[i - checkLength:i]
    fmt.Printf("%v\n", adjNums)

    for j := 0; j < checkLength; j++ {

      fmt.Printf("%v\n", adjNums[0:j+1])

      num, err := strconv.Atoi(adjNums[j:j+1])
      if err != nil {
        fmt.Println(err);
      }

      if num == 0 {
        i += j + 1
        continue OUTER
      }else{
        product *= num
      }

    }

    if product > largestProduct {
      largestProduct = product
    }

    i++
  }

  fmt.Printf("%v\n", largestProduct)

  return
}
